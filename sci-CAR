## gene location ~ peak location

## https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE117089

# links.txt
for link in `cat links.txt`;do wget -c $link;done

#GSM3271040	HEK293T, NIH/3T3, A549 cells, sci-CAR RNA-seq
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_cell.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_gene.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_gene_count.txt.gz

#GSM3271041	HEK293T, NIH/3T3, A549 cells, sci-CAR ATAC-seq
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_cell.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_peak.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_peak_count.txt.gz

pip install scanpy

################################################## CMOT ######################################################
# X: gene expression            (row: cell, column: gene)
# Y: chromatin accessibility
# gene_num: 113153
# cell_num: 6093


## process RNA (GSM3271040)
mkdir processed && cd processed
cp ../GSM3271040_RNA_sciCAR_A549_gene_count.txt.gz matrix.mtx.gz

zcat ../GSM3271040_RNA_sciCAR_A549_gene.txt.gz | sed '1d' | awk -F "," '{print $1 "\t" $3 "\t" "Gene Expression"}' > features.tsv
gzip features.tsv

zcat ../GSM3271040_RNA_sciCAR_A549_cell.txt.gz | sed '1d' | sed 's/,/_/g' > barcodes.tsv
gzip barcodes.tsv


## process ATAC (GSM3271041)
mkdir processed && cd processed

cp ../GSM3271041_ATAC_sciCAR_A549_peak_count.txt.gz matrix.mtx.gz

zcat ../GSM3271041_ATAC_sciCAR_A549_peak.txt.gz | sed '1d' | awk -F "," '{print $2}' | awk -F "-" '{print "chr" $1 ":" $2 "-" $3 "\t" "Peaks"}' \
                                                | awk '{print $1 "\t" $1 "\t" $2}' > features.tsv
gzip features.tsv

zcat ../GSM3271041_ATAC_sciCAR_A549_cell.txt.gz | sed '1d' | sed 's/,/_/g' > barcodes.tsv
gzip barcodes.tsv


## process co-assay
import scanpy as sc
import numpy as np
import pandas as pd

# RNA #
rna = sc.read_10x_mtx('GSM3271040/processed', cache=True)  # duplicated gene names: SNORD116-1  SNORD116-2  SNORD116-3...
# 6093 × 113153

rna.obs['cell_type'] = [x.split('_')[1] for x in rna.obs_names]
rna.obs['treatment'] = [x.split('_')[-1] for x in rna.obs_names]
rna.obs['raw'] = rna.obs_names
rna.obs_names = [x.split('_')[0] for x in rna.obs_names]
rna = rna[(rna.obs['cell_type'].isin(['293T', 'A549'])) & (rna.obs['treatment'].isin(['NA', '0'])), :]
# 1989 × 113153

sc.pp.filter_cells(rna, min_genes=200)
sc.pp.filter_cells(rna, max_genes=7000)
# 1989 × 113153 (no cell filtered)

rna.var['mt'] = rna.var_names.str.startswith('mt-')
rna = rna[:, rna.var['mt']==0]
# 1989 × 113116


# ATAC #
atac = sc.read_10x_mtx('GSM3271041/processed', cache=True, gex_only=False) 
# 6085 × 189603

atac.obs['species'] = [x.split('_')[1] for x in atac.obs_names]
atac.obs['treatment'] = [x.split('_')[-3] if x.split('_')[-3]!='3T3' else 'NA' for x in atac.obs_names]

cell_type = []
for i in range(len(atac.obs_names)):
    if atac.obs['species'][i]=='Human':
        cell_type.append(atac.obs_names[i].split('_')[2])
    elif atac.obs['species'][i]=='Mouse':
        cell_type.append('3T3')
    else:
        cell_type.append('Unknown')

atac.obs['cell_type'] = cell_type
atac.obs['raw'] = atac.obs_names
atac.obs_names = [x.split('_')[0] for x in atac.obs_names]
atac = atac[(atac.obs['species']=='Human') & (atac.obs['treatment'].isin(['NA', '0h'])), :]
# 2048 × 189603

atac.var['chrom'] = [x.split(':')[0] for x in atac.var_names]
atac = atac[:, atac.var['chrom'].isin(['chr'+str(i) for i in [*range(1, 23), 'X', 'Y']])]
# 2048 × 179288

rna_idx = rna.obs_names                                # 1989
atac_idx = atac.obs_names                              # 2048
co_idx = [idx for idx in rna_idx if idx in atac_idx]   # 1422

rna = rna[co_idx, :]
atac = atac[co_idx, :]

rna.write('RNA.h5ad')
atac.write('ATAC.h5ad')

rna_out = pd.DataFrame(data=rna.X.todense(), index=rna.obs_names, columns=rna.var_names)       # 1422 * 113116
rna_out.to_csv('RNA.csv', index=False)  # ~2.5 min    

atac_out = pd.DataFrame(data=atac.X.todense(), index=atac.obs_names, columns=atac.var_names)   # 1422 * 179288
atac_out[atac_out>0] = 1
atac_out.to_csv('ATAC.csv', index=False)  # ~4.5 min


## split dataset to train & test (0.8, 0.2)
import random

train_cnt = int(len(co_idx)*0.8)
co_idx_shuf = co_idx.copy()
random.seed(0)
random.shuffle(co_idx_shuf)
train_idx = co_idx_shuf[:train_cnt]
test_idx = co_idx_shuf[train_cnt:]

rna_out.loc[train_idx].to_csv('RNA_train.csv', index=False)   
rna_out.loc[test_idx].to_csv('RNA_test.csv', index=False) 

atac_out.loc[train_idx].to_csv('ATAC_train.csv', index=False) 
atac_out.loc[test_idx].to_csv('ATAC_test.csv', index=False) 


## correspondence matrix
w = np.diag([1]*train_cnt)
np.save('W.npy', w)


## modify run_cmot.py
#from datetime import datetime  # Luz add
#print('Read sourceX done', datetime.now().replace(microsecond=0))  # Luz add
#print('Read sourceY done', datetime.now().replace(microsecond=0))  # Luz add
#print('Read targetY done', datetime.now().replace(microsecond=0))  # Luz add
#print('Step A done', datetime.now().replace(microsecond=0))  # Luz add
#print('Step B done', datetime.now().replace(microsecond=0))  # Luz add


## cal_pearson_r.py
# python cal_pearson_r.py --pred results/Norm_ModalityXhat.csv --true RNA_test.csv
import argparse
import pandas as pd
from scipy import stats
import numpy as np

parser = argparse.ArgumentParser(description='Calculate total pearson correlation')
parser.add_argument('-p', '--pred', type=str, help='prediction')
parser.add_argument('-t', '--true', type=str, help='ground truth')
args = parser.parse_args()
pred_file = args.pred
true_file = args.true

pred = pd.read_csv(pred_file)
print('read pred file done')
true = pd.read_csv(true_file)
print('read true file done')

print('All-wise Pearson r:', stats.pearsonr(pred.values.flatten(), true.values.flatten())[0])

## cell-wise
cell_r = []
cell_cnt = pred.shape[0]
cell_r = [round(stats.pearsonr(pred.iloc[i], true.iloc[i])[0], 4) for i in range(cell_cnt)]
print('Cell-wise Pearson r:', np.nanmean(cell_r))

## gene-wise
gene_r = []
gene_cnt = pred.shape[1]
gene_r = [round(stats.pearsonr(pred.iloc[:, i], true.iloc[:, i])[0], 4) for i in range(gene_cnt)]
print('Gene-wise Pearson r:', np.nanmean(gene_r))


## ATAC to RNA
python3 ~/CMOT/src/run_cmot.py --sourceX RNA_train_p.csv --sourceY ATAC_train_p.csv --targetY ATAC_test_p.csv --K 5 --d 10 \
                               --W W.npy --hc 2 --reg_e 1e00 --reg_cl 1e00 --topFeat 100 --k 1 --outdir results_atac2rna


python cal_pearson_r.py --pred results/Norm_ModalityXhat.csv --true RNA_test.csv  # ~ 2.5 min   
#All-wise Pearson r: 0.3089343750370411
#Cell-wise Pearson r: 0.42445333333333335
#Gene-wise Pearson r: 0.008763513721862471

## RNA to ATAC
python3 ~/CMOT/src/run_cmot.py --sourceX ATAC_train_p.csv --sourceY RNA_train_p.csv --targetY RNA_test_p.csv --K 5 --d 10 \
                               --W W.npy --hc 2 --reg_e 1e00 --reg_cl 1e00 --topFeat 100 --k 1 --outdir results_rna2atac


## draft
#awk -F "," -v OFS="," '{NF=1000}1' RNA_train.csv > RNA_train_p.csv
#awk -F "," -v OFS="," '{NF=1000}1' RNA_test.csv > RNA_test_p.csv
#awk -F "," -v OFS="," '{NF=1000}1' ATAC_train.csv > ATAC_train_p.csv
#awk -F "," -v OFS="," '{NF=1000}1' ATAC_test.csv > ATAC_test_p.csv





############################## Polarbear ##############################




