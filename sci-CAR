## gene location ~ peak location

## https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE117089

# links.txt
for link in `cat links.txt`;do wget -c $link;done

#GSM3271040	HEK293T, NIH/3T3, A549 cells, sci-CAR RNA-seq
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_cell.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_gene.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271040/suppl/GSM3271040_RNA_sciCAR_A549_gene_count.txt.gz

#GSM3271041	HEK293T, NIH/3T3, A549 cells, sci-CAR ATAC-seq
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_cell.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_peak.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271041/suppl/GSM3271041_ATAC_sciCAR_A549_peak_count.txt.gz

#GSM3271042	HEK293T, NIH/3T3, A549 cells, sci-RNA-seq
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271042/suppl/GSM3271042_RNA_only_A549_cell.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271042/suppl/GSM3271042_RNA_only_A549_gene.txt.gz
# https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271042/suppl/GSM3271042_RNA_only_A549_gene_count.txt.gz

#GSM3271043	HEK293T, NIH/3T3, A549 cells, sci-ATAC-seq
https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271043/suppl/GSM3271043_ATAC_only_A549_cell.txt.gz
https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271043/suppl/GSM3271043_ATAC_only_A549_peak.txt.gz
https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3271nnn/GSM3271043/suppl/GSM3271043_ATAC_only_A549_peak_count.txt.gz

pip install scanpy

## CMOT ##
# X: gene expression            (row: cell, column: gene)
# Y: chromatin accessibility
# gene_num: 113153
# cell_num: 6093

gunzip GSM3271040_RNA_sciCAR_A549_gene_count.txt.gz
mv GSM3271040_RNA_sciCAR_A549_gene_count.txt GSM3271040_RNA_sciCAR_A549_gene_count.mtx

import scanpy as sc
import pandas as pd
import numpy as np

gene_cnt = sc.read('GSM3271040_RNA_sciCAR_A549_gene_count.mtx')
cell = pd.read_csv('GSM3271040_RNA_sciCAR_A549_cell.txt.gz')
cell.shape   # (6093, 4)
set(cell['cell_name'])   # {'293T', 'A549', 'mixed', '3T3'}
out = pd.DataFrame(gene_cnt.X[:, (cell['cell_name'].isin(['293T', 'A549'])) & (pd.isna(cell['treatment_time']) | cell['treatment_time']==0.0)].todense()).T

gene = pd.read_csv('GSM3271040_RNA_sciCAR_A549_gene.txt.gz')
gene['ensembl_id'] = [x.split('.')[0] for x in gene['gene_id']]
out.columns = gene['ensembl_id']
out = out[[gene['ensembl_id'][idx] for idx in gene.index if gene['gene_short_name'][idx][:3]!='mt-']]  # delete 37 mt genes

gene_exp_sum = (out!=0).sum(axis=1)
out = out[(gene_exp_sum>200) & (gene_exp_sum<7000)]  # gene_cnt>200 & <7000
out.to_csv('RNA.tsv', index=False)  # 2.5 min


cp ../GSM3271040_RNA_sciCAR_A549_gene_count.txt.gz matrix.mtx.gz

zcat ../GSM3271040_RNA_sciCAR_A549_gene.txt.gz | sed '1d' | awk -F "," '{print $1 "\t" $3 "\t" "Gene Expression"}' > features.tsv
gzip features.tsv

zcat ../GSM3271040_RNA_sciCAR_A549_cell.txt.gz | sed '1d' | sed 's/,/_/g' > barcodes.tsv
gzip barcodes.tsv



import scanpy as sc
import numpy as np
import pandas as pd

adata = sc.read_10x_mtx('raw/processed', cache=True)  # duplicated gene names: SNORD116-1  SNORD116-2  SNORD116-3...
# 6093 × 113153

adata.obs['cell_type'] = [x.split('_')[1] for x in adata.obs_names]
adata.obs['treatment'] = [x.split('_')[-1] for x in adata.obs_names]
adata = adata[(adata.obs['cell_type'].isin(['293T', 'A549'])) & (adata.obs['treatment'].isin(['NA', '0'])), :]
# 1989 × 113153

sc.pp.filter_cells(adata, min_genes=200)
sc.pp.filter_cells(adata, max_genes=7000)
# 1989 × 113153 (no cell filtered)

adata.var['mt'] = adata.var_names.str.startswith('mt-')
adata = adata[:, adata.var['mt']==0]
# 1989 × 113116

## no normalization
#adata.raw = adata.copy()
#n_counts = np.squeeze(np.array(adata.X.sum(axis=1)))
#sc.pp.normalize_total(adata, inplace=True)
#adata.obs["size_factors"] = n_counts / np.median(n_counts)
#adata.uns["median_counts"] = np.median(n_counts)
#sc.pp.log1p(adata, chunked=True, copy=False, chunk_size=100000)
#sc.pp.scale(adata, zero_center=True, copy=False)

out = pd.DataFrame(data=adata.X.todense(), index=adata.obs_names, columns=adata.var_names)
out.to_csv('RNA.csv', index=False)  # ~4 min

adata.write('human_RNA.h5ad')
